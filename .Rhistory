is_L2_item <- which(participant_data$stimulus == "../audio_problems/EN_M_6+9.mp3")
is_L3_item <- which(participant_data$stimulus == "../audio_problems/PT_F_6+9.mp3")
is_L4_item <- which(participant_data$stimulus == "../audio_problems/PT_M_6+9.mp3")
# insert list number as a column in each participant
if (length(is_L1_item) != 0){
L1_count <- 1 + L1_count
participant_data$exp_list <- "L1"
} else if (length(is_L2_item) != 0){
L2_count <- 1 + L2_count
participant_data$exp_list <- "L2"
} else if (length(is_L3_item) != 0){
L3_count <- 1 + L3_count
participant_data$exp_list <- "L3"
} else if (length(is_L4_item) != 0){
L4_count <- 1 + L4_count
participant_data$exp_list <- "L4"
}
print(paste("L1 = ", L1_count, "; L2 = ", L2_count, "; L3 = ", L3_count, "; L4 = ", L4_count, sep=""))
# remove Practice trials
# fetch questionnaire responses
# questionnaire_answers <- data.frame()
# questionnaire_answers <- rbind(questionnaire_answers, as.data.frame(participant_data[1:35,7]))
# questionnaire_answers$participantID <- paste("p", count, sep="")
# participants_questionnaire <- rbind(participants_questionnaire, questionnaire_answers)
data <- rbind(data, participant_data)
count <- count + 1
}
# preparing for 'for loop' to fetch all data
data <- data.frame()
count <- 1;
participants_questionnaire <- data.frame()
L1_count <- 0
L2_count <- 0
L3_count <- 0
L4_count <- 0
#fetch all data
for (p in participant_list) {
# fetch participant data
participant_data <- read.csv(file = participant_list[count])
#get participant's experiment running time
print(paste("p", count, " = ", tail(participant_data$time_elapsed, n=1), sep=""))
# add participant's code as variable
participant_data$participant <- paste("p", count, sep="")
# fetch proficiency and add as variable
row_participant_proficiency <- which(participant_data$internal_node_id == "0.0-34.0")
participant_proficiency <- substring(participant_data$response[row_participant_proficiency], 8, 9)
participant_data$proficiency <- participant_proficiency
# insert proficiency as high or low
if (participant_proficiency == "A1" | participant_proficiency == "A2" | participant_proficiency == "B1") {
participant_data$proficiency_group <- "low"
#print("low proficiency")
} else if (participant_proficiency == "B2" | participant_proficiency == "C1" | participant_proficiency == "C2") {
participant_data$proficiency_group <- "high"
#print("high proficiency")
}
# find out which experimental list each participant saw
is_L1_item <- which(participant_data$stimulus == "../audio_problems/EN_F_6+9.mp3")
is_L2_item <- which(participant_data$stimulus == "../audio_problems/EN_M_6+9.mp3")
is_L3_item <- which(participant_data$stimulus == "../audio_problems/PT_F_6+9.mp3")
is_L4_item <- which(participant_data$stimulus == "../audio_problems/PT_M_6+9.mp3")
# insert list number as a column in each participant
if (length(is_L1_item) != 0){
L1_count <- 1 + L1_count
participant_data$exp_list <- "L1"
} else if (length(is_L2_item) != 0){
L2_count <- 1 + L2_count
participant_data$exp_list <- "L2"
} else if (length(is_L3_item) != 0){
L3_count <- 1 + L3_count
participant_data$exp_list <- "L3"
} else if (length(is_L4_item) != 0){
L4_count <- 1 + L4_count
participant_data$exp_list <- "L4"
}
#print(paste("L1 = ", L1_count, "; L2 = ", L2_count, "; L3 = ", L3_count, "; L4 = ", L4_count, sep=""))
# remove Practice trials
# fetch questionnaire responses
# questionnaire_answers <- data.frame()
# questionnaire_answers <- rbind(questionnaire_answers, as.data.frame(participant_data[1:35,7]))
# questionnaire_answers$participantID <- paste("p", count, sep="")
# participants_questionnaire <- rbind(participants_questionnaire, questionnaire_answers)
data <- rbind(data, participant_data)
count <- count + 1
}
# preparing for 'for loop' to fetch all data
data <- data.frame()
count <- 1;
participants_questionnaire <- data.frame()
L1_count <- 0
L2_count <- 0
L3_count <- 0
L4_count <- 0
#fetch all data
for (p in participant_list) {
# fetch participant data
participant_data <- read.csv(file = participant_list[count])
#get participant's experiment running time
run_time <- tail(participant_data$time_elapsed, n=1)
print(paste("p", count, " = ", run_time/60000, sep=""))
# add participant's code as variable
participant_data$participant <- paste("p", count, sep="")
# fetch proficiency and add as variable
row_participant_proficiency <- which(participant_data$internal_node_id == "0.0-34.0")
participant_proficiency <- substring(participant_data$response[row_participant_proficiency], 8, 9)
participant_data$proficiency <- participant_proficiency
# insert proficiency as high or low
if (participant_proficiency == "A1" | participant_proficiency == "A2" | participant_proficiency == "B1") {
participant_data$proficiency_group <- "low"
#print("low proficiency")
} else if (participant_proficiency == "B2" | participant_proficiency == "C1" | participant_proficiency == "C2") {
participant_data$proficiency_group <- "high"
#print("high proficiency")
}
# find out which experimental list each participant saw
is_L1_item <- which(participant_data$stimulus == "../audio_problems/EN_F_6+9.mp3")
is_L2_item <- which(participant_data$stimulus == "../audio_problems/EN_M_6+9.mp3")
is_L3_item <- which(participant_data$stimulus == "../audio_problems/PT_F_6+9.mp3")
is_L4_item <- which(participant_data$stimulus == "../audio_problems/PT_M_6+9.mp3")
# insert list number as a column in each participant
if (length(is_L1_item) != 0){
L1_count <- 1 + L1_count
participant_data$exp_list <- "L1"
} else if (length(is_L2_item) != 0){
L2_count <- 1 + L2_count
participant_data$exp_list <- "L2"
} else if (length(is_L3_item) != 0){
L3_count <- 1 + L3_count
participant_data$exp_list <- "L3"
} else if (length(is_L4_item) != 0){
L4_count <- 1 + L4_count
participant_data$exp_list <- "L4"
}
#print(paste("L1 = ", L1_count, "; L2 = ", L2_count, "; L3 = ", L3_count, "; L4 = ", L4_count, sep=""))
# remove Practice trials
# fetch questionnaire responses
# questionnaire_answers <- data.frame()
# questionnaire_answers <- rbind(questionnaire_answers, as.data.frame(participant_data[1:35,7]))
# questionnaire_answers$participantID <- paste("p", count, sep="")
# participants_questionnaire <- rbind(participants_questionnaire, questionnaire_answers)
data <- rbind(data, participant_data)
count <- count + 1
}
# preparing for 'for loop' to fetch all data
data <- data.frame()
count <- 1;
participants_questionnaire <- data.frame()
L1_count <- 0
L2_count <- 0
L3_count <- 0
L4_count <- 0
run_time_all <- c()
#fetch all data
for (p in participant_list) {
# fetch participant data
participant_data <- read.csv(file = participant_list[count])
#get participant's experiment running time
run_time <- tail(participant_data$time_elapsed, n=1)
append(run_time_all, run_time)
print(paste("p", count, " = ", run_time/60000, sep=""))
# add participant's code as variable
participant_data$participant <- paste("p", count, sep="")
# fetch proficiency and add as variable
row_participant_proficiency <- which(participant_data$internal_node_id == "0.0-34.0")
participant_proficiency <- substring(participant_data$response[row_participant_proficiency], 8, 9)
participant_data$proficiency <- participant_proficiency
# insert proficiency as high or low
if (participant_proficiency == "A1" | participant_proficiency == "A2" | participant_proficiency == "B1") {
participant_data$proficiency_group <- "low"
#print("low proficiency")
} else if (participant_proficiency == "B2" | participant_proficiency == "C1" | participant_proficiency == "C2") {
participant_data$proficiency_group <- "high"
#print("high proficiency")
}
# find out which experimental list each participant saw
is_L1_item <- which(participant_data$stimulus == "../audio_problems/EN_F_6+9.mp3")
is_L2_item <- which(participant_data$stimulus == "../audio_problems/EN_M_6+9.mp3")
is_L3_item <- which(participant_data$stimulus == "../audio_problems/PT_F_6+9.mp3")
is_L4_item <- which(participant_data$stimulus == "../audio_problems/PT_M_6+9.mp3")
# insert list number as a column in each participant
if (length(is_L1_item) != 0){
L1_count <- 1 + L1_count
participant_data$exp_list <- "L1"
} else if (length(is_L2_item) != 0){
L2_count <- 1 + L2_count
participant_data$exp_list <- "L2"
} else if (length(is_L3_item) != 0){
L3_count <- 1 + L3_count
participant_data$exp_list <- "L3"
} else if (length(is_L4_item) != 0){
L4_count <- 1 + L4_count
participant_data$exp_list <- "L4"
}
#print(paste("L1 = ", L1_count, "; L2 = ", L2_count, "; L3 = ", L3_count, "; L4 = ", L4_count, sep=""))
# remove Practice trials
# fetch questionnaire responses
# questionnaire_answers <- data.frame()
# questionnaire_answers <- rbind(questionnaire_answers, as.data.frame(participant_data[1:35,7]))
# questionnaire_answers$participantID <- paste("p", count, sep="")
# participants_questionnaire <- rbind(participants_questionnaire, questionnaire_answers)
data <- rbind(data, participant_data)
count <- count + 1
}
print(ave(run_time_all))
print(run_time_all)
# preparing for 'for loop' to fetch all data
data <- data.frame()
count <- 1;
participants_questionnaire <- data.frame()
L1_count <- 0
L2_count <- 0
L3_count <- 0
L4_count <- 0
run_time_all <- c()
#fetch all data
for (p in participant_list) {
# fetch participant data
participant_data <- read.csv(file = participant_list[count])
#get participant's experiment running time
run_time <- tail(participant_data$time_elapsed, n=1)
run_time_all[p-1] <- run_time
print(paste("p", count, " = ", run_time/60000, sep=""))
# add participant's code as variable
participant_data$participant <- paste("p", count, sep="")
# fetch proficiency and add as variable
row_participant_proficiency <- which(participant_data$internal_node_id == "0.0-34.0")
participant_proficiency <- substring(participant_data$response[row_participant_proficiency], 8, 9)
participant_data$proficiency <- participant_proficiency
# insert proficiency as high or low
if (participant_proficiency == "A1" | participant_proficiency == "A2" | participant_proficiency == "B1") {
participant_data$proficiency_group <- "low"
#print("low proficiency")
} else if (participant_proficiency == "B2" | participant_proficiency == "C1" | participant_proficiency == "C2") {
participant_data$proficiency_group <- "high"
#print("high proficiency")
}
# find out which experimental list each participant saw
is_L1_item <- which(participant_data$stimulus == "../audio_problems/EN_F_6+9.mp3")
is_L2_item <- which(participant_data$stimulus == "../audio_problems/EN_M_6+9.mp3")
is_L3_item <- which(participant_data$stimulus == "../audio_problems/PT_F_6+9.mp3")
is_L4_item <- which(participant_data$stimulus == "../audio_problems/PT_M_6+9.mp3")
# insert list number as a column in each participant
if (length(is_L1_item) != 0){
L1_count <- 1 + L1_count
participant_data$exp_list <- "L1"
} else if (length(is_L2_item) != 0){
L2_count <- 1 + L2_count
participant_data$exp_list <- "L2"
} else if (length(is_L3_item) != 0){
L3_count <- 1 + L3_count
participant_data$exp_list <- "L3"
} else if (length(is_L4_item) != 0){
L4_count <- 1 + L4_count
participant_data$exp_list <- "L4"
}
#print(paste("L1 = ", L1_count, "; L2 = ", L2_count, "; L3 = ", L3_count, "; L4 = ", L4_count, sep=""))
# remove Practice trials
# fetch questionnaire responses
# questionnaire_answers <- data.frame()
# questionnaire_answers <- rbind(questionnaire_answers, as.data.frame(participant_data[1:35,7]))
# questionnaire_answers$participantID <- paste("p", count, sep="")
# participants_questionnaire <- rbind(participants_questionnaire, questionnaire_answers)
data <- rbind(data, participant_data)
count <- count + 1
}
# preparing for 'for loop' to fetch all data
data <- data.frame()
count <- 1;
participants_questionnaire <- data.frame()
L1_count <- 0
L2_count <- 0
L3_count <- 0
L4_count <- 0
run_time_all <- c()
#fetch all data
for (p in participant_list) {
# fetch participant data
participant_data <- read.csv(file = participant_list[count])
#get participant's experiment running time
run_time <- tail(participant_data$time_elapsed, n=1)
run_time_all[count-1] <- run_time
print(paste("p", count, " = ", run_time/60000, sep=""))
# add participant's code as variable
participant_data$participant <- paste("p", count, sep="")
# fetch proficiency and add as variable
row_participant_proficiency <- which(participant_data$internal_node_id == "0.0-34.0")
participant_proficiency <- substring(participant_data$response[row_participant_proficiency], 8, 9)
participant_data$proficiency <- participant_proficiency
# insert proficiency as high or low
if (participant_proficiency == "A1" | participant_proficiency == "A2" | participant_proficiency == "B1") {
participant_data$proficiency_group <- "low"
#print("low proficiency")
} else if (participant_proficiency == "B2" | participant_proficiency == "C1" | participant_proficiency == "C2") {
participant_data$proficiency_group <- "high"
#print("high proficiency")
}
# find out which experimental list each participant saw
is_L1_item <- which(participant_data$stimulus == "../audio_problems/EN_F_6+9.mp3")
is_L2_item <- which(participant_data$stimulus == "../audio_problems/EN_M_6+9.mp3")
is_L3_item <- which(participant_data$stimulus == "../audio_problems/PT_F_6+9.mp3")
is_L4_item <- which(participant_data$stimulus == "../audio_problems/PT_M_6+9.mp3")
# insert list number as a column in each participant
if (length(is_L1_item) != 0){
L1_count <- 1 + L1_count
participant_data$exp_list <- "L1"
} else if (length(is_L2_item) != 0){
L2_count <- 1 + L2_count
participant_data$exp_list <- "L2"
} else if (length(is_L3_item) != 0){
L3_count <- 1 + L3_count
participant_data$exp_list <- "L3"
} else if (length(is_L4_item) != 0){
L4_count <- 1 + L4_count
participant_data$exp_list <- "L4"
}
#print(paste("L1 = ", L1_count, "; L2 = ", L2_count, "; L3 = ", L3_count, "; L4 = ", L4_count, sep=""))
# remove Practice trials
# fetch questionnaire responses
# questionnaire_answers <- data.frame()
# questionnaire_answers <- rbind(questionnaire_answers, as.data.frame(participant_data[1:35,7]))
# questionnaire_answers$participantID <- paste("p", count, sep="")
# participants_questionnaire <- rbind(participants_questionnaire, questionnaire_answers)
data <- rbind(data, participant_data)
count <- count + 1
}
print(run_time_all)
ave(run_time_all)
#remove unnecessary columns
data <- subset(data, select = -c(view_history, time_elapsed, question_order, internal_node_id, audio_file))
#move rows of column stimulus_language down by 1 so stimulus_language stays in the same row as rts and accuracy
data <- data %>% mutate(stimulus_language=lag(stimulus_language))
#remove excess rows
experimental_data <- which(data$trial_part == "show_options")
data <- data[experimental_data, ]
#remove practice trials
prac_stimuli <- c("../audio_problems/Prac_PT_F_12x3.mp3", "../audio_problems/Prac_EN_M_21x4.mp3", "../audio_problems/Prac_EN_M_24x4.mp3", "../audio_problems/Prac_PT_F_24+9.mp3", "../audio_problems/Prac_EN_M_34-6.mp3", "../audio_problems/Prac_PT_F_37x2.mp3", "../audio_problems/Prac_PT_F_38+2.mp3", "../audio_problems/Prac_EN_M_47+5.mp3", "../audio_problems/Prac_PT_F_53-9.mp3", "../audio_problems/Prac_EN_M_56+7.mp3", "../audio_problems/Prac_PT_F_61-3.mp3", "../audio_problems/Prac_PT_F_64db4.mp3", "../audio_problems/Prac_EN_M_78db6.mp3", "../audio_problems/Prac_EN_M_84db4.mp3", "../audio_problems/Prac_EN_M_87-8.mp3", "../audio_problems/Prac_PT_F_96db3.mp3")
data <- data %>% filter(stimulus_problem != prac_stimuli[1] & stimulus_problem != prac_stimuli[2] & stimulus_problem != prac_stimuli[3] & stimulus_problem != prac_stimuli[4] & stimulus_problem != prac_stimuli[5] & stimulus_problem != prac_stimuli[6] & stimulus_problem != prac_stimuli[7] & stimulus_problem != prac_stimuli[8] & stimulus_problem != prac_stimuli[9] & stimulus_problem != prac_stimuli[10] & stimulus_problem != prac_stimuli[11] & stimulus_problem != prac_stimuli[12] & stimulus_problem != prac_stimuli[13] & stimulus_problem != prac_stimuli[14] & stimulus_problem != prac_stimuli[15] & stimulus_problem != prac_stimuli[16])
#replace string 'null' by NA
data[data == "null"] <- NA
#fixing "correct_answer" column and calculate "correct" column
data$correct_answer[data$correct_answer == "answer_left"] <- "q"
data$correct_answer[data$correct_answer == "answer_right"] <- "p"
data$correct = ifelse(as.character(data$correct_answer) == as.character(data$response), TRUE, FALSE)
# set rt as numeric
data$rt = as.numeric(as.character(data$rt))
#set proficiency as factor
data$proficiency <- as.factor(data$proficiency)
data$proficiency_group <- as.factor(data$proficiency_group)
#split data for each participant
split_data <- split(data, f = data$participant)
for (p_num in c(seq(1:38))) {
p_name <- paste("p", p_num, sep="")
assign(p_name, split_data[[p_name]])
}
count <- 0
data_no_NA <- data.frame()
for(p_name in c(paste("p", seq(1:37), sep=""))) {
curr_participant <- get(p_name)
#calculate mean and SD per participant
curr_participant$subjmean = ave(curr_participant$rt,curr_participant$participant, FUN=function(x) mean(x, na.rm=TRUE))
curr_participant$subjsd = ave(curr_participant$rt,curr_participant$participant, FUN=function(x) sd(x, na.rm=TRUE))
#calculate max and minimum RT allowed through STD (mean +- 2*STD)
curr_participant$RT_max = curr_participant$subjmean + (2.5*curr_participant$subjsd)
curr_participant$RT_min = curr_participant$subjmean - (2.5*curr_participant$subjsd)
#subset data to remove extremes
curr_participant = subset(curr_participant, rt<(curr_participant$subjmean+2.5*curr_participant$subjsd))
curr_participant = subset(curr_participant, rt>(curr_participant$subjmean-2.5*curr_participant$subjsd))
#calculate accuracy per participant
this_participant_accuracy <- round(sum(curr_participant$correct, na.rm=TRUE)*100/90, 2)
curr_participant$accuracy <- this_participant_accuracy
if (this_participant_accuracy > 55) {
assign(paste("no_na", p_name, sep=""), curr_participant)
data_no_NA <- rbind(data_no_NA, curr_participant)
print(count)
count <- count +1
}
}
unique(data_no_NA$participant)
#pie chart for accuracy on every participant, every condition
accuracy_table_names <- c("timeout", "correct", "wrong")
#accuracy_table_values <- c(sum(is.na(data$correct)), sum(data$correct, na.rm=TRUE), length(data$correct[data$correct == FALSE]) - sum(is.na(data$correct)))
accuracy_table_values <- c(sum(is.na(data_no_NA$correct)), sum(data_no_NA$correct, na.rm=TRUE), length(data_no_NA$correct[data_no_NA$correct == FALSE]) - sum(is.na(data_no_NA$correct)))
accuracy_table <- data.frame(accuracy_table_names, accuracy_table_values)
colnames(accuracy_table) <- c("accuracy", "n")
accuracy_table_labels_names <- c(paste0(accuracy_table$accuracy[1], " (", accuracy_table$n[1], ")"), paste0(accuracy_table$accuracy[2], " (", accuracy_table$n[2], ")"),paste0(accuracy_table$accuracy[3], " (", accuracy_table$n[3], ")"))
pie(x = accuracy_table$n, labels = accuracy_table_labels_names, main = "accuracy_all")
View(data_no_NA)
unique(data_no_NA$participant)
count <- 0
data_no_NA <- data.frame()
for(p_name in c(paste("p", seq(1:37), sep=""))) {
curr_participant <- get(p_name)
#calculate mean and SD per participant
curr_participant$subjmean = ave(curr_participant$rt,curr_participant$participant, FUN=function(x) mean(x, na.rm=TRUE))
curr_participant$subjsd = ave(curr_participant$rt,curr_participant$participant, FUN=function(x) sd(x, na.rm=TRUE))
#calculate max and minimum RT allowed through STD (mean +- 2*STD)
curr_participant$RT_max = curr_participant$subjmean + (2.5*curr_participant$subjsd)
curr_participant$RT_min = curr_participant$subjmean - (2.5*curr_participant$subjsd)
#subset data to remove extremes
curr_participant = subset(curr_participant, rt<(curr_participant$subjmean+2.5*curr_participant$subjsd))
curr_participant = subset(curr_participant, rt>(curr_participant$subjmean-2.5*curr_participant$subjsd))
#calculate accuracy per participant
this_participant_accuracy <- round(sum(curr_participant$correct, na.rm=TRUE)*100/90, 2)
print(this_participant_accuracy)
curr_participant$accuracy <- this_participant_accuracy
if (this_participant_accuracy > 55) {
assign(paste("no_na", p_name, sep=""), curr_participant)
data_no_NA <- rbind(data_no_NA, curr_participant)
print(count)
count <- count +1
}
}
count <- 0
data_no_NA <- data.frame()
for(p_name in c(paste("p", seq(1:37), sep=""))) {
curr_participant <- get(p_name)
#calculate mean and SD per participant
curr_participant$subjmean = ave(curr_participant$rt,curr_participant$participant, FUN=function(x) mean(x, na.rm=TRUE))
curr_participant$subjsd = ave(curr_participant$rt,curr_participant$participant, FUN=function(x) sd(x, na.rm=TRUE))
#calculate max and minimum RT allowed through STD (mean +- 2*STD)
curr_participant$RT_max = curr_participant$subjmean + (2.5*curr_participant$subjsd)
curr_participant$RT_min = curr_participant$subjmean - (2.5*curr_participant$subjsd)
#subset data to remove extremes
curr_participant = subset(curr_participant, rt<(curr_participant$subjmean+2.5*curr_participant$subjsd))
curr_participant = subset(curr_participant, rt>(curr_participant$subjmean-2.5*curr_participant$subjsd))
#calculate accuracy per participant
this_participant_accuracy <- round(sum(curr_participant$correct, na.rm=TRUE)*90/100, 2)
print(this_participant_accuracy)
curr_participant$accuracy <- this_participant_accuracy
if (this_participant_accuracy > 55) {
assign(paste("no_na", p_name, sep=""), curr_participant)
data_no_NA <- rbind(data_no_NA, curr_participant)
print(count)
count <- count +1
}
}
data_EN <- subset(data_no_NA, stimulus_language == "EN")
data_PT <- subset(data_no_NA, stimulus_language == "PT")
data_EN_sub_add <- subset(data_EN, condition == "simple_sum" | condition == "complex_sum" | condition == "simple_subtraction" | condition == "complex_subtraction")
data_PT_sub_add <- subset(data_PT, condition == "simple_sum" | condition == "complex_sum" | condition == "simple_subtraction" | condition == "complex_subtraction")
data_EN_div_mult <- subset(data_EN, condition == "simple_division" | condition == "complex_division" | condition == "simple_multiplication" | condition == "complex_multiplication")
data_PT_div_mult <- subset(data_PT, condition == "simple_division" | condition == "complex_division" | condition == "simple_multiplication" | condition == "complex_multiplication")
m
m_PT_div_mult_1 <- lmer(rt ~ proficiency_group + condition + proficiency_group*condition + (1|participant), data=data_PT_div_mult)
summary(m_PT_div_mult_1)
m_PT_sub_add_1 <- lmer(rt ~ proficiency_group + condition + proficiency_group*condition + (1|participant), data=data_PT_sub_add)
summary(m_PT_sub_add_1)
m_EN_div_mult_1 <- lmer(rt ~ proficiency_group + condition + proficiency_group*condition + (1|participant), data=data_EN_div_mult)
summary(m_EN_div_mult_1)
m_EN_sub_add_1 <- lmer(rt ~ proficiency_group + condition + proficiency_group*condition + (1|participant), data=data_EN_sub_add)
summary(m_EN_sub_add_1)
# get all data files names
participant_list = list.files(pattern="*.csv")
# preparing for 'for loop' to fetch all data
data <- data.frame()
count <- 1;
participants_questionnaire <- data.frame()
L1_count <- 0
L2_count <- 0
L3_count <- 0
L4_count <- 0
run_time_all <- c()
#fetch all data
for (p in participant_list) {
# fetch participant data
participant_data <- read.csv(file = participant_list[count])
#get participant's experiment running time
run_time <- tail(participant_data$time_elapsed, n=1)
run_time_all[count-1] <- run_time
print(paste("p", count, " = ", run_time/60000, sep=""))
# add participant's code as variable
participant_data$participant <- paste("p", count, sep="")
# fetch proficiency and add as variable
row_participant_proficiency <- which(participant_data$internal_node_id == "0.0-34.0")
participant_proficiency <- substring(participant_data$response[row_participant_proficiency], 8, 9)
participant_data$proficiency <- participant_proficiency
# insert proficiency as high or low
if (participant_proficiency == "A1" | participant_proficiency == "A2" | participant_proficiency == "B1") {
participant_data$proficiency_group <- "low"
#print("low proficiency")
} else if (participant_proficiency == "B2" | participant_proficiency == "C1" | participant_proficiency == "C2") {
participant_data$proficiency_group <- "high"
#print("high proficiency")
}
# find out which experimental list each participant saw
is_L1_item <- which(participant_data$stimulus == "../audio_problems/EN_F_6+9.mp3")
is_L2_item <- which(participant_data$stimulus == "../audio_problems/EN_M_6+9.mp3")
is_L3_item <- which(participant_data$stimulus == "../audio_problems/PT_F_6+9.mp3")
is_L4_item <- which(participant_data$stimulus == "../audio_problems/PT_M_6+9.mp3")
# insert list number as a column in each participant
if (length(is_L1_item) != 0){
L1_count <- 1 + L1_count
participant_data$exp_list <- "L1"
} else if (length(is_L2_item) != 0){
L2_count <- 1 + L2_count
participant_data$exp_list <- "L2"
} else if (length(is_L3_item) != 0){
L3_count <- 1 + L3_count
participant_data$exp_list <- "L3"
} else if (length(is_L4_item) != 0){
L4_count <- 1 + L4_count
participant_data$exp_list <- "L4"
}
print(paste("L1 = ", L1_count, "; L2 = ", L2_count, "; L3 = ", L3_count, "; L4 = ", L4_count, sep=""))
# remove Practice trials
# fetch questionnaire responses
# questionnaire_answers <- data.frame()
# questionnaire_answers <- rbind(questionnaire_answers, as.data.frame(participant_data[1:35,7]))
# questionnaire_answers$participantID <- paste("p", count, sep="")
# participants_questionnaire <- rbind(participants_questionnaire, questionnaire_answers)
data <- rbind(data, participant_data)
count <- count + 1
}
